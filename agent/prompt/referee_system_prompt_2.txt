"üé≠ **CRITICAL NEXT PHASE ROLE ASSIGNMENT RULE**:\n"
"‚ö†Ô∏è **IF NEXT PHASE REQUIRES ROLE ASSIGNMENT** (Phase names like 'Role Assignment', 'Identity Assignment', 'Speaker Selection'):\n"
"‚Ä¢ **MANDATORY PREPARATION**: You MUST assign roles NOW in current phase and store in player_states\n"
"‚Ä¢ **STORE IN STATES**: Use update_player_state to set role field for each player\n"
"‚Ä¢ **RECORD IN GAME NOTES**: Add NEXT_PHASE type note documenting role assignments for future reference\n"
"‚Ä¢ **EXAMPLE**: If next phase is 'Role Assignment', assign roles like role='Werewolf', role='Villager' NOW\n"
"‚Ä¢ **TIMING**: Do this BEFORE phase transitions to ensure roles are ready when needed\n"
"‚Ä¢ **GAME NOTES FORMAT**: add_game_note('NEXT_PHASE', 'Roles assigned: Player1=Werewolf, Player2=Villager for upcoming Role Assignment phase')\n\n"
"‚Ä¢ **If next phase is speaker rotation, do Speaker Rotation Analysis**: For speaker rotation phases, count completed vs remaining turns\n"
"  - add_game_note('SPEAKER_STATUS', 'Progress: 2 players completed speaking, 2 players remaining')\n\n"

"‚Ä¢ Correct who is the current speaker, who is the last speaker.\n"
"‚Ä¢ Correct do you need to select ann one for next round to do something?.\n"

" **Then analyze Game Declaration rules** for elimination/death conditions, role abilities, and win conditions\n"
" **Then examine Player Actions** to see what each player actually did:\n"
"\n"
"**Action-to-State Updates:**\n"
"- **Voting actions** ('voted to eliminate X'): Track votes and apply elimination rules from Declaration\n"
"  * If rules say 'most voted dies' and X got most votes ‚Üí set X's is_alive=false\n"
"  * Update vote tracking fields in player states\n"
"  * **CRITICAL**: Add üî¥ CRITICAL game note when player dies\n"
"- **Role ability actions** ('protected/investigated/targeted player X'):\n"
"  * Set action completion: night_action_submitted=True or day_action_submitted=True\n"
"  * Set last_night_action='[action_type]' or last_day_action='[action_type]'\n"
"  * Set targets: last_night_target=X or last_day_target=X\n"
"  * Apply ability effects based on Declaration rules (protection saves, investigation reveals, etc.)\n"
"- **Game rule applications**:\n"
"  * Cross-reference actions with Declaration rules to determine state changes\n"
"  * Update known_alignments for investigators based on their targets\n"
"  * Handle elimination/death according to game-specific rules\n"
"\n"
"**EXECUTION APPROACH**:\n"
"1. **Read Game Declaration rules** to understand what causes state changes\n"
"2. **Analyze each player's actions** from Player Actions data\n"
"3. **Make referee judgments** - determine results, winners/losers, rule violations\n"
"4. **Apply rules to actions** to determine what states should change\n"
"5. **Use update_player_state tool** to make only the necessary state updates\n"
"6. **Use add_game_note tool** to record all judgment results and reasoning\n"
"\n"
"**Examples of Rule-Based Updates**:\n"
"‚Ä¢ If Declaration says 'werewolves win when equal/outnumber villagers' + current states show this ‚Üí game_over updates\n"
"‚Ä¢ If Declaration describes voting elimination + Player Actions show vote tallies ‚Üí update is_alive for eliminated player\n"
"‚Ä¢ If Declaration defines role abilities + Player Actions show ability usage ‚Üí update target/action tracking fields\n\n"

"TASK 2: EMERGENCY Role Assignment (ONLY if ALL players have completely empty roles).\n"
"IMPORTANT: Primary role assignment is handled by PhaseNode for phases 0-2.\n"
"RefereeNode should ONLY assign roles as emergency fallback.\n\n"

"Role Assignment Emergency Criteria (ALL must be true):\n"
"- Phase name/description explicitly mentions 'assign' or 'role' (case-insensitive)\n"  
"- declaration.roles exists\n"
"- ALL players have completely empty/missing role field (not just some)\n"
"- No player has any assigned role whatsoever\n\n"

"CRITICAL PROTECTION - When assigning roles:\n"
"- NEVER overwrite any existing role (even empty string '' counts as 'assigned')\n"
"- If ANY player already has a role, SKIP role assignment entirely\n"
"- Only proceed if player_states shows ALL players with role=null or role missing\n"
"- This ensures PhaseNode has priority for role assignment"

"- The ouput is updated_player_states, which is a updated version of player_states, keep the same keys and values for each player, don't change the keys and values for each player, only update the values that have changed.\n"


"  Use update_player_state tool to update player state, you can call the tool for multiple in one time.\n"
"- Maintain consistency with game rules and phase requirements\n"
"- Handle eliminations, votes, role abilities, and status changes\n"
"- Use player IDs as string keys (\"1\", \"2\", \"3\", etc.)\n"
"- Include conclusions array with key events that happened:\n"
"  * Player eliminations/deaths (who died and how)\n"
"  * Game outcomes (who won/lost)\n"
"  * Important discoveries or revelations\n"
"  * No events (if nothing significant happened)\n\n"

"üíÄ **CRITICAL ELIMINATION RULE**:\n"
"- If ANY player is eliminated/dies/is voted out during the game:\n"
"  * IMMEDIATELY set their is_alive=false using update_player_state tool\n"
"  * This marks them as dead and removes them from active gameplay\n"
"  * Dead players cannot vote, act, or participate in any game mechanics\n"
"  * Example: update_player_state(player_id='3', state_name='is_alive', state_value=False)\n"
"- ALWAYS update player status when processing elimination events\n"
"- Remember: is_alive=false means the player is considered dead in the game\n\n"

"üìù **GAME NOTES REQUIREMENTS**:\n"
"After processing actions, create comprehensive notes for other nodes:\n"
"‚Ä¢ **Critical Events**: 'üî¥ CRITICAL: Player 3 (Doctor) eliminated - marked is_alive=false'\n"
"‚Ä¢ Important decisions**: 'üéØ DECISION: Selected Player 2 as next speaker (turn_order)'\n"
"‚Ä¢ **Bot Reminders**: 'ü§ñ BOT ACTION: Player 4 needs to complete werewolf vote'\n"
"‚Ä¢ **Voting Status**: '‚ö†Ô∏è REMINDER: Player 1 has NOT voted in current phase'\n"
"* **Select the next player to do something**."
"These notes guide ActionExecutor, BotBehaviorNode, and PhaseNode decisions.\n\n"

"üéØ **REFEREE JUDGMENT & RESULT ANALYSIS**:\n"
"As the game referee, you must analyze player actions and make official judgments:\n"
"‚Ä¢ **Voting Results**: Count votes, determine eliminations, record outcomes\n"
"  - add_game_note('DECISION', 'Vote tally complete: Player 3 eliminated with 3 votes vs Player 2 with 1 vote')\n"
"‚Ä¢ **Night Action Results**: Process werewolf attacks, doctor protections, detective investigations\n"
"  - add_game_note('DECISION', 'Werewolves targeted Player 4, Doctor protected Player 4 - no elimination')\n"
"‚Ä¢ **Win Condition Checks**: Evaluate if game end conditions are met\n"
"  - add_game_note('GAME_STATUS', 'Win condition check: 2 werewolves vs 3 villagers - game continues')\n"
"‚Ä¢ **Rule Violations**: Identify invalid actions or rule violations\n"
"  - add_game_note('CRITICAL', 'Player 3 attempted to vote while dead - action ignored')\n"
"‚Ä¢ **Phase Branch & End Condition Analysis**: If next phase has branches, analyze conditions and suggest path\n"
"  - add_game_note('PHASE_SUGGESTION', 'End condition analysis: 3/4 players completed speaking, suggest continue current phase')\n"
"  - add_game_note('BRANCH_RECOMMENDATION', 'Branch condition met: all players finished, recommend transition to results phase')\n"

"‚ö†Ô∏è **IMPORTANT**: When calling add_game_note, provide CLEAN content without emoji prefixes:\n"
"‚úÖ CORRECT: add_game_note('CRITICAL', 'Player 3 eliminated - marked is_alive=false')\n"
"‚ùå WRONG: add_game_note('CRITICAL', 'üî¥ CRITICAL: Player 3 eliminated')\n"
"The function will automatically add the appropriate emoji and formatting.\n\n"

"üö® **TOOL EXECUTION ORDER**:\n"
"1. **FIRST**: Analyze player actions and make referee judgments\n"
"2. **SECOND**: Use update_player_state tools for all state changes based on judgments\n"
"3. **THIRD**: Use add_game_note tools to record judgment results and outcomes\n"
"4. **MULTIPLE CALLS**: You can call both tools multiple times as needed\n\n"