2025-10-13 20:07:13,726 [INFO] DSLAgent: Logging to: /home/lee/canvas-with-langgraph-python/logs/dsl_agent_20251013_200713.log
2025-10-13 20:07:16,777 [INFO] DSLAgent: === DECLARATION NODE START ===
2025-10-13 20:07:16,778 [INFO] DSLAgent: Initial state: {'yaml_path': 'two-truths-and-a-lie.yaml', 'game_description': "A conversational party game where players take turns sharing three statements about themselves (two true, one false). Other players discuss and try to identify the lie through natural conversation and voting. Points awarded for correct guesses and successful deception.\\n\\nGame Flow Navigation: The game follows a speaker rotation system through phases - game_setup → round_start → statement_collection → discussion_phase → voting_phase → reveal_phase → scoring_update → (check if all players have been speaker) → round_start OR game_over. Each player takes one turn as the speaker per round. Multiple rounds can be played for longer games.\\n\\nConversation Mechanics: This game is purely conversational. Players share statements naturally like 'Here are my three things: First, I once met a celebrity. Second, I can speak four languages. Third, I've never broken a bone.' During discussion, players debate which seems false. Votes are extracted from conversation like 'I'm going with number two' or 'The language thing sounds made up.' No commands or structured inputs needed - the orchestrator interprets natural dialogue.\\n\\nWin Conditions: Game ends after all players have been speaker for the agreed number of rounds (default 1). Winner has highest total score from: correct lie identifications (1 point each) + fooling other players (1 point per player fooled when you're the speaker"}
2025-10-13 20:07:16,778 [INFO] DSLAgent: Game description: A conversational party game where players take turns sharing three statements about themselves (two ...
2025-10-13 20:07:23,018 [INFO] DSLAgent: Extracted YAML text length: 1506
2025-10-13 20:07:23,020 [INFO] DSLAgent: Parsed declaration object keys: ['declaration']
2025-10-13 20:07:23,020 [INFO] DSLAgent: Target file path: /home/lee/canvas-with-langgraph-python/games/two-truths-and-a-lie.yaml
2025-10-13 20:07:23,020 [INFO] DSLAgent: Writing declaration to file. Output keys: ['declaration']
2025-10-13 20:07:23,021 [INFO] DSLAgent: Verification - file content length after write: 1485
2025-10-13 20:07:23,022 [INFO] DSLAgent: === DECLARATION NODE END ===
2025-10-13 20:07:23,023 [INFO] DSLAgent: === PHASES NODE START ===
2025-10-13 20:07:23,023 [INFO] DSLAgent: State received: {'yaml_path': '/home/lee/canvas-with-langgraph-python/games/two-truths-and-a-lie.yaml', 'dsl': {'declaration': {'description': 'A conversational party game where players share three statements about themselves (two true, one false). Other players determine which statement is false through discussion and voting. Points are given for correct guesses and successful deception.', 'is_multiplayer': True, 'roles': [{'name': 'Speaker', 'description': 'The current player sharing three statements, two truths and one lie.'}, {'name': 'Guesser', 'description': 'Players who listen, discuss, and vote to identify the false statement.'}], 'player_states': {'name': {'type': 'string', 'example': 'Player A', 'description': "Player's display name in the game."}, 'score': {'type': 'num', 'example': 3, 'description': 'The total score accumulated by the player based on correct guesses and successful deception.'}, 'current_role': {'type': 'string', 'example': 'Speaker', 'description': "The player's current role, either 'Speaker' or 'Guesser'."}, 'has_been_speaker': {'type': 'boolean', 'example': True, 'description': 'Indicates whether the player has taken their turn as the speaker in the current round.'}}, 'players_example': {'players': {1: {'name': 'Alice', 'score': 5, 'current_role': 'Guesser', 'has_been_speaker': True}, 2: {'name': 'Bob', 'score': 3, 'current_role': 'Speaker', 'has_been_speaker': False}, 3: {'name': 'Charlie', 'score': 4, 'current_role': 'Guesser', 'has_been_speaker': True}}}}}, 'game_description': "A conversational party game where players take turns sharing three statements about themselves (two true, one false). Other players discuss and try to identify the lie through natural conversation and voting. Points awarded for correct guesses and successful deception.\\n\\nGame Flow Navigation: The game follows a speaker rotation system through phases - game_setup → round_start → statement_collection → discussion_phase → voting_phase → reveal_phase → scoring_update → (check if all players have been speaker) → round_start OR game_over. Each player takes one turn as the speaker per round. Multiple rounds can be played for longer games.\\n\\nConversation Mechanics: This game is purely conversational. Players share statements naturally like 'Here are my three things: First, I once met a celebrity. Second, I can speak four languages. Third, I've never broken a bone.' During discussion, players debate which seems false. Votes are extracted from conversation like 'I'm going with number two' or 'The language thing sounds made up.' No commands or structured inputs needed - the orchestrator interprets natural dialogue.\\n\\nWin Conditions: Game ends after all players have been speaker for the agreed number of rounds (default 1). Winner has highest total score from: correct lie identifications (1 point each) + fooling other players (1 point per player fooled when you're the speaker"}
2025-10-13 20:07:23,024 [INFO] DSLAgent: Reading from file path: /home/lee/canvas-with-langgraph-python/games/two-truths-and-a-lie.yaml
2025-10-13 20:07:23,024 [INFO] DSLAgent: File exists: True
2025-10-13 20:07:23,024 [INFO] DSLAgent: File content before processing (length: 1485):
2025-10-13 20:07:23,024 [INFO] DSLAgent: File content preview: declaration:
  description: A conversational party game where players share three statements about
    themselves (two true, one false). Other players determine which statement is false
    through di...
2025-10-13 20:07:23,026 [INFO] DSLAgent: Existing YAML keys: ['declaration']
2025-10-13 20:07:23,027 [INFO] DSLAgent: Declaration found in existing file with keys: ['description', 'is_multiplayer', 'roles', 'player_states', 'players_example']
2025-10-13 20:07:23,028 [INFO] DSLAgent: Declaration block being sent to model (length: 1485):
2025-10-13 20:07:23,028 [INFO] DSLAgent: Declaration block preview: declaration:
  description: A conversational party game where players share three statements about
    themselves (two true, one false). Other players determine which statement is false
    through di...
2025-10-13 20:08:00,968 [INFO] DSLAgent: Model response YAML length: 3851
2025-10-13 20:08:00,973 [INFO] DSLAgent: Parsed phases object keys: [0, 1, 2, 3, 4, 5]
2025-10-13 20:08:00,973 [INFO] DSLAgent: Before merge - existing keys: ['declaration']
2025-10-13 20:08:00,973 [INFO] DSLAgent: Added phases from root of phases_obj
2025-10-13 20:08:00,973 [INFO] DSLAgent: After merge - existing keys: ['declaration', 'phases']
2025-10-13 20:08:00,976 [INFO] DSLAgent: Final YAML to write (length: 5492):
2025-10-13 20:08:00,976 [INFO] DSLAgent: Final YAML preview: declaration:
  description: A conversational party game where players share three statements about
    themselves (two true, one false). Other players determine which statement is false
    through di...
2025-10-13 20:08:00,977 [INFO] DSLAgent: Verification - file content after write (length: 5492):
2025-10-13 20:08:00,977 [INFO] DSLAgent: Verification preview: declaration:
  description: A conversational party game where players share three statements about
    themselves (two true, one false). Other players determine which statement is false
    through di...
2025-10-13 20:08:00,978 [INFO] DSLAgent: === PHASES NODE END ===
2025-10-13 20:08:00,979 [INFO] DSLAgent: === VALIDATION NODE START ===
2025-10-13 20:08:00,980 [INFO] DSLAgent: State received: {'yaml_path': '/home/lee/canvas-with-langgraph-python/games/two-truths-and-a-lie.yaml', 'dsl': {'declaration': {'description': 'A conversational party game where players share three statements about themselves (two true, one false). Other players determine which statement is false through discussion and voting. Points are given for correct guesses and successful deception.', 'is_multiplayer': True, 'roles': [{'name': 'Speaker', 'description': 'The current player sharing three statements, two truths and one lie.'}, {'name': 'Guesser', 'description': 'Players who listen, discuss, and vote to identify the false statement.'}], 'player_states': {'name': {'type': 'string', 'example': 'Player A', 'description': "Player's display name in the game."}, 'score': {'type': 'num', 'example': 3, 'description': 'The total score accumulated by the player based on correct guesses and successful deception.'}, 'current_role': {'type': 'string', 'example': 'Speaker', 'description': "The player's current role, either 'Speaker' or 'Guesser'."}, 'has_been_speaker': {'type': 'boolean', 'example': True, 'description': 'Indicates whether the player has taken their turn as the speaker in the current round.'}}, 'players_example': {'players': {1: {'name': 'Alice', 'score': 5, 'current_role': 'Guesser', 'has_been_speaker': True}, 2: {'name': 'Bob', 'score': 3, 'current_role': 'Speaker', 'has_been_speaker': False}, 3: {'name': 'Charlie', 'score': 4, 'current_role': 'Guesser', 'has_been_speaker': True}}}}, 'phases': {0: {'name': 'Game Introduction', 'description': 'Introduce the game rules, setup, and objectives to all players.', 'actions': [{'description': 'Display game rules and objectives', 'tools': ['display_game_intro']}, {'description': 'Show player list and game configuration', 'tools': ['display_player_setup']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Game introduction has been displayed to all players.'}, 'next_phase': {'id': 1, 'name': 'Start Game Turn'}}, 1: {'name': 'Start Game Turn', 'description': 'Initiate the turn for the current speaker to share their statements.', 'actions': [{'description': "Assign 'Speaker' role to next player who has not been speaker", 'tools': ['assign_speaker_role']}, {'description': 'Notify the speaker to prepare their statements', 'tools': ['notify_speaker_preparation']}], 'completion_criteria': {'type': 'player_action', 'description': 'Speaker is ready with their statements, and relevant player state (player_states) has been updated.', 'wait_for': 'single_player_choice', 'target_players': {'description': "Current player assigned as 'Speaker'", 'condition': "player.current_role == 'Speaker'"}}, 'next_phase': {'id': 2, 'name': "Speaker's Turn"}}, 2: {'name': "Speaker's Turn", 'description': 'The speaker shares three statements, two truths and one lie, with the group.', 'actions': [{'description': 'Speaker submits their three statements', 'tools': ['collect_speaker_statements']}, {'description': 'Display statements to all guessers', 'tools': ['display_statements_to_guessers']}], 'completion_criteria': {'type': 'player_action', 'description': 'Statements have been shared with all players, and relevant player state (player_states) has been updated.', 'wait_for': 'all_players_action', 'target_players': {'description': 'All players excluding the current speaker', 'condition': "player.current_role == 'Guesser'"}}, 'next_phase': {'id': 3, 'name': 'Discussion and Voting'}}, 3: {'name': 'Discussion and Voting', 'description': 'Players discuss the statements and each guesser votes on which they think is the lie.', 'actions': [{'description': 'Facilitate discussion among players', 'tools': ['facilitate_discussion']}, {'description': 'Create and display voting UI for all guessers', 'tools': ['create_voting_ui']}], 'completion_criteria': {'type': 'player_action', 'description': 'Votes have been received from all guessers, and relevant player state (player_states) has been updated.', 'wait_for': 'all_players_action', 'target_players': {'description': "All players in the role of 'Guesser'", 'condition': "player.current_role == 'Guesser'"}}, 'next_phase': {'id': 4, 'name': 'Reveal and Score'}}, 4: {'name': 'Reveal and Score', 'description': 'Reveal the lie and update scores based on votes and deception.', 'actions': [{'description': 'Reveal which statement was the lie', 'tools': ['reveal_lie']}, {'description': 'Update scores based on correct guesses and deception success', 'tools': ['update_scores']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Lie has been revealed and scores have been updated for all players.'}, 'next_phase': {'If all players have been speakers this round': {'id': 5, 'name': 'End of Round'}, 'If there are players who have not been speakers this round': {'id': 1, 'name': 'Start Game Turn'}}}, 5: {'name': 'End of Round', 'description': 'Conclude the round and prepare for the next round if required.', 'actions': [{'description': 'Reset the speaker status for all players', 'tools': ['reset_speaker_status']}, {'description': 'Display round summary and current scores', 'tools': ['display_round_summary']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Round summary has been displayed and player statuses reset.'}, 'next_phase': {'id': 1, 'name': 'Start Game Turn'}}}}, 'game_description': "A conversational party game where players take turns sharing three statements about themselves (two true, one false). Other players discuss and try to identify the lie through natural conversation and voting. Points awarded for correct guesses and successful deception.\\n\\nGame Flow Navigation: The game follows a speaker rotation system through phases - game_setup → round_start → statement_collection → discussion_phase → voting_phase → reveal_phase → scoring_update → (check if all players have been speaker) → round_start OR game_over. Each player takes one turn as the speaker per round. Multiple rounds can be played for longer games.\\n\\nConversation Mechanics: This game is purely conversational. Players share statements naturally like 'Here are my three things: First, I once met a celebrity. Second, I can speak four languages. Third, I've never broken a bone.' During discussion, players debate which seems false. Votes are extracted from conversation like 'I'm going with number two' or 'The language thing sounds made up.' No commands or structured inputs needed - the orchestrator interprets natural dialogue.\\n\\nWin Conditions: Game ends after all players have been speaker for the agreed number of rounds (default 1). Winner has highest total score from: correct lie identifications (1 point each) + fooling other players (1 point per player fooled when you're the speaker"}
2025-10-13 20:08:00,980 [INFO] DSLAgent: Reading from file path: /home/lee/canvas-with-langgraph-python/games/two-truths-and-a-lie.yaml
2025-10-13 20:08:00,980 [INFO] DSLAgent: File exists: True
2025-10-13 20:08:00,980 [INFO] DSLAgent: File content before validation (length: 5492):
2025-10-13 20:08:00,981 [INFO] DSLAgent: File content preview: declaration:
  description: A conversational party game where players share three statements about
    themselves (two true, one false). Other players determine which statement is false
    through di...
2025-10-13 20:08:36,307 [INFO] DSLAgent: Model response YAML length: 5079
2025-10-13 20:08:36,313 [INFO] DSLAgent: Validated YAML keys: ['declaration', 'phases']
2025-10-13 20:08:36,316 [INFO] DSLAgent: Final validated YAML to write (length: 5036):
2025-10-13 20:08:36,316 [INFO] DSLAgent: Final YAML preview: declaration:
  description: A conversational party game where players share three statements about
    themselves (two true, one false). Other players determine which statement is false
    through di...
2025-10-13 20:08:36,316 [INFO] DSLAgent: Final verification - file content (length: 5036):
2025-10-13 20:08:36,317 [INFO] DSLAgent: Final content preview: declaration:
  description: A conversational party game where players share three statements about
    themselves (two true, one false). Other players determine which statement is false
    through di...
2025-10-13 20:08:36,317 [INFO] DSLAgent: === VALIDATION NODE END ===
2025-10-13 20:11:49,145 [INFO] DSLAgent: === DECLARATION NODE START ===
2025-10-13 20:11:49,145 [INFO] DSLAgent: Initial state: {'yaml_path': 'werewolf-(mafia).yaml', 'game_description': 'Night phase allows secret actions by special roles. Werewolves choose elimination target, detective investigates, doctor protects. Actions resolve in order: kill attempt → protection check → investigation. Morning reveals results.\\n\\nGame Flow Navigation: The game follows a state graph - role_assignment → first_night → first_morning → first_day_discussion → first_day_voting → (night → morning → day_discussion → day_voting) cycle until win conditions met → game_over. Each phase has specific exit conditions that determine the next state. Check win conditions after eliminations: werewolves win if they equal/outnumber villagers, village wins if all werewolves eliminated'}
2025-10-13 20:11:49,145 [INFO] DSLAgent: Game description: Night phase allows secret actions by special roles. Werewolves choose elimination target, detective ...
2025-10-13 20:11:52,147 [INFO] DSLAgent: Extracted YAML text length: 1608
2025-10-13 20:11:52,149 [INFO] DSLAgent: Parsed declaration object keys: ['declaration']
2025-10-13 20:11:52,149 [INFO] DSLAgent: Target file path: /home/lee/canvas-with-langgraph-python/games/werewolf-(mafia).yaml
2025-10-13 20:11:52,149 [INFO] DSLAgent: Writing declaration to file. Output keys: ['declaration']
2025-10-13 20:11:52,150 [INFO] DSLAgent: Verification - file content length after write: 1580
2025-10-13 20:11:52,150 [INFO] DSLAgent: === DECLARATION NODE END ===
2025-10-13 20:11:52,151 [INFO] DSLAgent: === PHASES NODE START ===
2025-10-13 20:11:52,151 [INFO] DSLAgent: State received: {'yaml_path': '/home/lee/canvas-with-langgraph-python/games/werewolf-(mafia).yaml', 'dsl': {'declaration': {'description': 'A social deduction game where players have secret roles as villagers or werewolves. During the night, werewolves choose a target to eliminate, the detective investigates a player, and the doctor can protect someone from harm. Actions resolve with the elimination attempt first, followed by protection checks and investigations. Results are revealed in the morning.', 'is_multiplayer': True, 'roles': [{'name': 'Villager', 'description': 'Goal is to identify and eliminate the werewolves.'}, {'name': 'Werewolf', 'description': 'Chooses a player to eliminate each night. Wins if werewolves equal or outnumber villagers.'}, {'name': 'Detective', 'description': 'Investigates one player each night to determine their role.'}, {'name': 'Doctor', 'description': 'Can protect one player each night from being eliminated.'}], 'player_states': {'name': {'type': 'string', 'example': 'Player X', 'description': "The player's display name used throughout the game."}, 'role': {'type': 'string', 'example': 'Detective', 'description': 'The role assigned to the player, determining their abilities and win conditions.'}, 'is_alive': {'type': 'boolean', 'example': True, 'description': 'Indicates if the player is still participating in the game (true=alive; false=eliminated).'}}, 'players_example': {'players': {1: {'name': 'Alpha', 'role': 'Werewolf', 'is_alive': True}, 2: {'name': 'Beta', 'role': 'Detective', 'is_alive': True}, 3: {'name': 'Gamma', 'role': 'Villager', 'is_alive': True}}}}}, 'game_description': 'Night phase allows secret actions by special roles. Werewolves choose elimination target, detective investigates, doctor protects. Actions resolve in order: kill attempt → protection check → investigation. Morning reveals results.\\n\\nGame Flow Navigation: The game follows a state graph - role_assignment → first_night → first_morning → first_day_discussion → first_day_voting → (night → morning → day_discussion → day_voting) cycle until win conditions met → game_over. Each phase has specific exit conditions that determine the next state. Check win conditions after eliminations: werewolves win if they equal/outnumber villagers, village wins if all werewolves eliminated'}
2025-10-13 20:11:52,152 [INFO] DSLAgent: Reading from file path: /home/lee/canvas-with-langgraph-python/games/werewolf-(mafia).yaml
2025-10-13 20:11:52,152 [INFO] DSLAgent: File exists: True
2025-10-13 20:11:52,152 [INFO] DSLAgent: File content before processing (length: 1580):
2025-10-13 20:11:52,152 [INFO] DSLAgent: File content preview: declaration:
  description: A social deduction game where players have secret roles as villagers
    or werewolves. During the night, werewolves choose a target to eliminate, the
    detective investi...
2025-10-13 20:11:52,154 [INFO] DSLAgent: Existing YAML keys: ['declaration']
2025-10-13 20:11:52,154 [INFO] DSLAgent: Declaration found in existing file with keys: ['description', 'is_multiplayer', 'roles', 'player_states', 'players_example']
2025-10-13 20:11:52,155 [INFO] DSLAgent: Declaration block being sent to model (length: 1580):
2025-10-13 20:11:52,155 [INFO] DSLAgent: Declaration block preview: declaration:
  description: A social deduction game where players have secret roles as villagers
    or werewolves. During the night, werewolves choose a target to eliminate, the
    detective investi...
2025-10-13 20:12:08,264 [INFO] DSLAgent: Model response YAML length: 5856
2025-10-13 20:12:08,269 [INFO] DSLAgent: Parsed phases object keys: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2025-10-13 20:12:08,269 [INFO] DSLAgent: Before merge - existing keys: ['declaration']
2025-10-13 20:12:08,269 [INFO] DSLAgent: Added phases from root of phases_obj
2025-10-13 20:12:08,269 [INFO] DSLAgent: After merge - existing keys: ['declaration', 'phases']
2025-10-13 20:12:08,273 [INFO] DSLAgent: Final YAML to write (length: 7681):
2025-10-13 20:12:08,273 [INFO] DSLAgent: Final YAML preview: declaration:
  description: A social deduction game where players have secret roles as villagers
    or werewolves. During the night, werewolves choose a target to eliminate, the
    detective investi...
2025-10-13 20:12:08,274 [INFO] DSLAgent: Verification - file content after write (length: 7681):
2025-10-13 20:12:08,274 [INFO] DSLAgent: Verification preview: declaration:
  description: A social deduction game where players have secret roles as villagers
    or werewolves. During the night, werewolves choose a target to eliminate, the
    detective investi...
2025-10-13 20:12:08,274 [INFO] DSLAgent: === PHASES NODE END ===
2025-10-13 20:12:08,275 [INFO] DSLAgent: === VALIDATION NODE START ===
2025-10-13 20:12:08,275 [INFO] DSLAgent: State received: {'yaml_path': '/home/lee/canvas-with-langgraph-python/games/werewolf-(mafia).yaml', 'dsl': {'declaration': {'description': 'A social deduction game where players have secret roles as villagers or werewolves. During the night, werewolves choose a target to eliminate, the detective investigates a player, and the doctor can protect someone from harm. Actions resolve with the elimination attempt first, followed by protection checks and investigations. Results are revealed in the morning.', 'is_multiplayer': True, 'roles': [{'name': 'Villager', 'description': 'Goal is to identify and eliminate the werewolves.'}, {'name': 'Werewolf', 'description': 'Chooses a player to eliminate each night. Wins if werewolves equal or outnumber villagers.'}, {'name': 'Detective', 'description': 'Investigates one player each night to determine their role.'}, {'name': 'Doctor', 'description': 'Can protect one player each night from being eliminated.'}], 'player_states': {'name': {'type': 'string', 'example': 'Player X', 'description': "The player's display name used throughout the game."}, 'role': {'type': 'string', 'example': 'Detective', 'description': 'The role assigned to the player, determining their abilities and win conditions.'}, 'is_alive': {'type': 'boolean', 'example': True, 'description': 'Indicates if the player is still participating in the game (true=alive; false=eliminated).'}}, 'players_example': {'players': {1: {'name': 'Alpha', 'role': 'Werewolf', 'is_alive': True}, 2: {'name': 'Beta', 'role': 'Detective', 'is_alive': True}, 3: {'name': 'Gamma', 'role': 'Villager', 'is_alive': True}}}}, 'phases': {0: {'name': 'Game Introduction', 'description': 'Introduce the game rules, setup, and objectives to all players.', 'actions': [{'description': 'Display game rules and objectives', 'tools': ['display_game_intro']}, {'description': 'Show player list and game configuration', 'tools': ['display_player_setup']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Game introduction has been displayed to all players.'}, 'next_phase': {'id': 1, 'name': 'Role Assignment'}}, 1: {'name': 'Role Assignment', 'description': 'Randomly assign roles to players according to game configuration.', 'actions': [{'description': 'Randomly assign all roles to players based on game setup', 'tools': ['assign_roles_randomly']}, {'description': 'Notify each player of their role privately', 'tools': ['notify_player_roles']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'All roles have been assigned and players have been notified.'}, 'next_phase': {'id': 2, 'name': 'Werewolf Night Action'}}, 2: {'name': 'Werewolf Night Action', 'description': 'Werewolves secretly select a target to eliminate.', 'actions': [{'description': 'Display elimination target options to werewolves', 'tools': ['display_target_selection']}], 'completion_criteria': {'type': 'player_action', 'description': 'Werewolves have chosen a target, and relevant player state (player_states) has been updated.', 'wait_for': 'multiple_players_action', 'target_players': {'description': "All players with role 'Werewolf'", 'condition': "player.role == 'Werewolf' and player.is_alive == true"}}, 'next_phase': {'id': 3, 'name': 'Doctor Night Action'}}, 3: {'name': 'Doctor Night Action', 'description': 'The doctor chooses one player to protect during the night.', 'actions': [{'description': 'Display protection options to the doctor', 'tools': ['display_protection_selection']}], 'completion_criteria': {'type': 'player_action', 'description': 'Doctor has selected a protection target, and relevant player state (player_states) has been updated.', 'wait_for': 'single_player_choice', 'target_players': {'description': "Player with role 'Doctor'", 'condition': "player.role == 'Doctor' and player.is_alive == true"}}, 'next_phase': {'id': 4, 'name': 'Detective Night Action'}}, 4: {'name': 'Detective Night Action', 'description': 'The detective selects a player to investigate.', 'actions': [{'description': 'Display investigation options to the detective', 'tools': ['display_investigation_selection']}], 'completion_criteria': {'type': 'player_action', 'description': 'Detective has selected a player to investigate, and relevant player state (player_states) has been updated.', 'wait_for': 'single_player_choice', 'target_players': {'description': "Player with role 'Detective'", 'condition': "player.role == 'Detective' and player.is_alive == true"}}, 'next_phase': {'id': 5, 'name': 'Reveal Night Results'}}, 5: {'name': 'Reveal Night Results', 'description': "Reveal the results of the night's actions to all players.", 'actions': [{'description': 'Display the outcome of the night actions: who was eliminated, protected, and investigated.', 'tools': ['display_night_results']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Night results have been displayed to all players.'}, 'next_phase': {'id': 6, 'name': 'Day Discussion'}}, 6: {'name': 'Day Discussion', 'description': 'Players discuss the events of last night and decide on a course of action.', 'actions': [{'description': "Allow players to discuss openly about the night's events", 'tools': ['enable_communication']}], 'completion_criteria': {'type': 'timer', 'description': 'Discussion time is over after a set period.'}, 'next_phase': {'id': 7, 'name': 'Voting'}}, 7: {'name': 'Voting', 'description': 'All surviving players vote to decide who they suspect of being a werewolf.', 'actions': [{'description': 'Create and display voting UI for all surviving players', 'tools': ['create_voting_ui']}], 'completion_criteria': {'type': 'player_action', 'description': 'Votes have been received from all surviving players, and relevant player state (player_states) has been updated.', 'wait_for': 'all_players_action', 'target_players': {'description': 'All surviving players', 'condition': 'player.is_alive == true'}}, 'next_phase': {'id': 8, 'name': 'Announce Voting Results'}}, 8: {'name': 'Announce Voting Results', 'description': 'Announce the outcome of the voting and eliminate the voted player if necessary.', 'actions': [{'description': 'Display the voting results and eliminate the player if necessary', 'tools': ['display_voting_results']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Voting results have been displayed to all players.'}, 'next_phase': {'id': 9, 'name': 'Check Win Conditions'}}, 9: {'name': 'Check Win Conditions', 'description': 'Evaluate if any win condition has been met, otherwise continue the game.', 'actions': [{'description': 'Calculate the remaining werewolves and villagers to determine if a team has won.', 'tools': ['evaluate_win_conditions']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Win conditions have been evaluated and the state has been updated.'}, 'next_phase': {'If werewolves equal or outnumber villagers': {'id': 10, 'name': 'Game Over – Werewolves Win'}, 'If no werewolves remain': {'id': 10, 'name': 'Game Over – Villagers Win'}, 'Otherwise, proceed to the next night': {'id': 2, 'name': 'Werewolf Night Action'}}}, 10: {'name': 'Game Over', 'description': 'The game concludes with the announcement of the winning team.', 'actions': [{'description': 'Display the winning team and final player roles', 'tools': ['display_game_over']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Final game results have been displayed to all players.'}, 'next_phase': None}}}, 'game_description': 'Night phase allows secret actions by special roles. Werewolves choose elimination target, detective investigates, doctor protects. Actions resolve in order: kill attempt → protection check → investigation. Morning reveals results.\\n\\nGame Flow Navigation: The game follows a state graph - role_assignment → first_night → first_morning → first_day_discussion → first_day_voting → (night → morning → day_discussion → day_voting) cycle until win conditions met → game_over. Each phase has specific exit conditions that determine the next state. Check win conditions after eliminations: werewolves win if they equal/outnumber villagers, village wins if all werewolves eliminated'}
2025-10-13 20:12:08,275 [INFO] DSLAgent: Reading from file path: /home/lee/canvas-with-langgraph-python/games/werewolf-(mafia).yaml
2025-10-13 20:12:08,275 [INFO] DSLAgent: File exists: True
2025-10-13 20:12:08,275 [INFO] DSLAgent: File content before validation (length: 7681):
2025-10-13 20:12:08,275 [INFO] DSLAgent: File content preview: declaration:
  description: A social deduction game where players have secret roles as villagers
    or werewolves. During the night, werewolves choose a target to eliminate, the
    detective investi...
2025-10-13 20:12:20,181 [INFO] DSLAgent: Model response YAML length: 7696
2025-10-13 20:12:20,187 [INFO] DSLAgent: Validated YAML keys: ['declaration', 'phases']
2025-10-13 20:12:20,191 [INFO] DSLAgent: Final validated YAML to write (length: 7681):
2025-10-13 20:12:20,191 [INFO] DSLAgent: Final YAML preview: declaration:
  description: A social deduction game where players have secret roles as villagers
    or werewolves. During the night, werewolves choose a target to eliminate, the
    detective investi...
2025-10-13 20:12:20,192 [INFO] DSLAgent: Final verification - file content (length: 7681):
2025-10-13 20:12:20,192 [INFO] DSLAgent: Final content preview: declaration:
  description: A social deduction game where players have secret roles as villagers
    or werewolves. During the night, werewolves choose a target to eliminate, the
    detective investi...
2025-10-13 20:12:20,192 [INFO] DSLAgent: === VALIDATION NODE END ===
2025-10-13 20:14:16,277 [INFO] DSLAgent: === DECLARATION NODE START ===
2025-10-13 20:14:16,277 [INFO] DSLAgent: Initial state: {'yaml_path': 'bang!.yaml', 'game_description': 'A Wild West shootout card game where players have hidden roles and use playing cards to attack, defend, and survive. The Sheriff (revealed) must eliminate Outlaws and the Renegade. Deputies protect the Sheriff. Outlaws try to kill the Sheriff. The Renegade wants to be the last one standing. Players sit in a circle with distance determining who can be targeted by various cards.\\n\\nGame Flow Navigation: game_setup → role_assignment → character_assignment → initial_setup → turn_start → draw_phase → play_phase → (reaction windows for cards like Bang!/Missed!) → damage_resolution → discard_phase → elimination_check → (check win conditions) → turn_start OR game_over. Each turn consists of drawing 2 cards and playing cards from hand.\\n\\nRole Victory Conditions: Sheriff wins if all Outlaws and Renegade eliminated. Outlaws win if Sheriff eliminated (even if they\'re dead). Deputies win if Sheriff wins. Renegade wins if they\'re the last player alive. Sheriff is always revealed, other roles stay hidden until eliminated.\\n\\nDistance and Range: Players sit in a circle. Distance = shortest path between players (clockwise or counter-clockwise). Base range for Bang! is 1 (adjacent players only). Weapons increase Bang! range. Some cards (Panic!, Cat Balou) have fixed range 1. Distance affects strategic positioning and alliances.\\n\\nCard Types: Playing cards include Bang! (attack), Missed! (defense), Beer (heal), Panic!/Cat Balou (steal/discard), Duel (force showdown), Indians!/Gatling (area attacks), Weapons (increase range), and other equipment. Each character has unique abilities that modify rules (e.g., Rose Doolan sees everyone at distance -1).\\n\\nReaction System: When attacked with Bang!, target can play Missed! to avoid damage. Indians! requires all players to discard Bang! or take damage. Duel creates Bang! exchanges until someone can\'t respond. Real-time reaction windows use collectInputs with timeouts."'}
2025-10-13 20:14:16,277 [INFO] DSLAgent: Game description: A Wild West shootout card game where players have hidden roles and use playing cards to attack, defe...
2025-10-13 20:14:25,698 [INFO] DSLAgent: Extracted YAML text length: 2098
2025-10-13 20:14:25,701 [INFO] DSLAgent: Parsed declaration object keys: ['declaration']
2025-10-13 20:14:25,701 [INFO] DSLAgent: Target file path: /home/lee/canvas-with-langgraph-python/games/bang!.yaml
2025-10-13 20:14:25,701 [INFO] DSLAgent: Writing declaration to file. Output keys: ['declaration']
2025-10-13 20:14:25,703 [INFO] DSLAgent: Verification - file content length after write: 2132
2025-10-13 20:14:25,703 [INFO] DSLAgent: === DECLARATION NODE END ===
2025-10-13 20:14:25,704 [INFO] DSLAgent: === PHASES NODE START ===
2025-10-13 20:14:25,704 [INFO] DSLAgent: State received: {'yaml_path': '/home/lee/canvas-with-langgraph-python/games/bang!.yaml', 'dsl': {'declaration': {'description': 'A Wild West shootout card game where players have hidden roles and use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws and the Renegade. Deputies protect the Sheriff. Outlaws try to kill the Sheriff. The Renegade wants to be the last one standing.', 'is_multiplayer': True, 'roles': [{'name': 'Sheriff', 'description': 'Revealed at the start. Must eliminate all Outlaws and the Renegade to win.'}, {'name': 'Outlaw', 'description': 'Try to kill the Sheriff. They win if the Sheriff is eliminated.'}, {'name': 'Deputy', 'description': 'Protect the Sheriff and win if the Sheriff wins.'}, {'name': 'Renegade', 'description': 'Wants to be the last player standing. Wins if they are the last player alive.'}], 'player_states': {'name': {'type': 'string', 'example': 'Player A', 'description': 'Player name'}, 'role': {'type': 'string', 'example': 'Sheriff', 'description': "Player's assigned role (Sheriff, Outlaw, Deputy, Renegade). Hidden except for the Sheriff."}, 'cards': {'type': 'dict', 'example': {'Bang!': 2, 'Missed!': 1}, 'description': 'Cards currently held by the player.'}, 'health': {'type': 'num', 'example': 4, 'description': "Player's health points, affected by attacks or healing. The Sheriff usually starts with more health."}, 'distance': {'type': 'num', 'example': 1, 'description': 'The number of seats between this player and their target. Determines who can be attacked with certain cards.'}}, 'players_example': {'players': {1: {'name': 'John', 'role': 'Sheriff', 'cards': {'Bang!': 2, 'Missed!': 1}, 'health': 5, 'distance': 1}, 2: {'name': 'Jane', 'role': 'Outlaw', 'cards': {'Panic!': 1, 'Beer': 1}, 'health': 4, 'distance': 1}, 3: {'name': 'Bill', 'role': 'Deputy', 'cards': {'Bang!': 1, 'Duel': 1}, 'health': 4, 'distance': 1}, 4: {'name': 'Sue', 'role': 'Renegade', 'cards': {'Cat Balou': 1, 'Missed!': 2}, 'health': 4, 'distance': 1}}}}}, 'game_description': 'A Wild West shootout card game where players have hidden roles and use playing cards to attack, defend, and survive. The Sheriff (revealed) must eliminate Outlaws and the Renegade. Deputies protect the Sheriff. Outlaws try to kill the Sheriff. The Renegade wants to be the last one standing. Players sit in a circle with distance determining who can be targeted by various cards.\\n\\nGame Flow Navigation: game_setup → role_assignment → character_assignment → initial_setup → turn_start → draw_phase → play_phase → (reaction windows for cards like Bang!/Missed!) → damage_resolution → discard_phase → elimination_check → (check win conditions) → turn_start OR game_over. Each turn consists of drawing 2 cards and playing cards from hand.\\n\\nRole Victory Conditions: Sheriff wins if all Outlaws and Renegade eliminated. Outlaws win if Sheriff eliminated (even if they\'re dead). Deputies win if Sheriff wins. Renegade wins if they\'re the last player alive. Sheriff is always revealed, other roles stay hidden until eliminated.\\n\\nDistance and Range: Players sit in a circle. Distance = shortest path between players (clockwise or counter-clockwise). Base range for Bang! is 1 (adjacent players only). Weapons increase Bang! range. Some cards (Panic!, Cat Balou) have fixed range 1. Distance affects strategic positioning and alliances.\\n\\nCard Types: Playing cards include Bang! (attack), Missed! (defense), Beer (heal), Panic!/Cat Balou (steal/discard), Duel (force showdown), Indians!/Gatling (area attacks), Weapons (increase range), and other equipment. Each character has unique abilities that modify rules (e.g., Rose Doolan sees everyone at distance -1).\\n\\nReaction System: When attacked with Bang!, target can play Missed! to avoid damage. Indians! requires all players to discard Bang! or take damage. Duel creates Bang! exchanges until someone can\'t respond. Real-time reaction windows use collectInputs with timeouts."'}
2025-10-13 20:14:25,704 [INFO] DSLAgent: Reading from file path: /home/lee/canvas-with-langgraph-python/games/bang!.yaml
2025-10-13 20:14:25,704 [INFO] DSLAgent: File exists: True
2025-10-13 20:14:25,704 [INFO] DSLAgent: File content before processing (length: 2132):
2025-10-13 20:14:25,705 [INFO] DSLAgent: File content preview: declaration:
  description: A Wild West shootout card game where players have hidden roles and
    use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws
    and the Rene...
2025-10-13 20:14:25,707 [INFO] DSLAgent: Existing YAML keys: ['declaration']
2025-10-13 20:14:25,707 [INFO] DSLAgent: Declaration found in existing file with keys: ['description', 'is_multiplayer', 'roles', 'player_states', 'players_example']
2025-10-13 20:14:25,708 [INFO] DSLAgent: Declaration block being sent to model (length: 2132):
2025-10-13 20:14:25,708 [INFO] DSLAgent: Declaration block preview: declaration:
  description: A Wild West shootout card game where players have hidden roles and
    use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws
    and the Rene...
2025-10-13 20:14:35,640 [INFO] DSLAgent: Model response YAML length: 3223
2025-10-13 20:14:35,645 [INFO] DSLAgent: Parsed phases object keys: [0, 1, 2, 3, 4]
2025-10-13 20:14:35,645 [INFO] DSLAgent: Before merge - existing keys: ['declaration']
2025-10-13 20:14:35,645 [INFO] DSLAgent: Added phases from root of phases_obj
2025-10-13 20:14:35,645 [INFO] DSLAgent: After merge - existing keys: ['declaration', 'phases']
2025-10-13 20:14:35,648 [INFO] DSLAgent: Final YAML to write (length: 5497):
2025-10-13 20:14:35,648 [INFO] DSLAgent: Final YAML preview: declaration:
  description: A Wild West shootout card game where players have hidden roles and
    use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws
    and the Rene...
2025-10-13 20:14:35,649 [INFO] DSLAgent: Verification - file content after write (length: 5497):
2025-10-13 20:14:35,649 [INFO] DSLAgent: Verification preview: declaration:
  description: A Wild West shootout card game where players have hidden roles and
    use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws
    and the Rene...
2025-10-13 20:14:35,649 [INFO] DSLAgent: === PHASES NODE END ===
2025-10-13 20:14:35,650 [INFO] DSLAgent: === VALIDATION NODE START ===
2025-10-13 20:14:35,651 [INFO] DSLAgent: State received: {'yaml_path': '/home/lee/canvas-with-langgraph-python/games/bang!.yaml', 'dsl': {'declaration': {'description': 'A Wild West shootout card game where players have hidden roles and use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws and the Renegade. Deputies protect the Sheriff. Outlaws try to kill the Sheriff. The Renegade wants to be the last one standing.', 'is_multiplayer': True, 'roles': [{'name': 'Sheriff', 'description': 'Revealed at the start. Must eliminate all Outlaws and the Renegade to win.'}, {'name': 'Outlaw', 'description': 'Try to kill the Sheriff. They win if the Sheriff is eliminated.'}, {'name': 'Deputy', 'description': 'Protect the Sheriff and win if the Sheriff wins.'}, {'name': 'Renegade', 'description': 'Wants to be the last player standing. Wins if they are the last player alive.'}], 'player_states': {'name': {'type': 'string', 'example': 'Player A', 'description': 'Player name'}, 'role': {'type': 'string', 'example': 'Sheriff', 'description': "Player's assigned role (Sheriff, Outlaw, Deputy, Renegade). Hidden except for the Sheriff."}, 'cards': {'type': 'dict', 'example': {'Bang!': 2, 'Missed!': 1}, 'description': 'Cards currently held by the player.'}, 'health': {'type': 'num', 'example': 4, 'description': "Player's health points, affected by attacks or healing. The Sheriff usually starts with more health."}, 'distance': {'type': 'num', 'example': 1, 'description': 'The number of seats between this player and their target. Determines who can be attacked with certain cards.'}}, 'players_example': {'players': {1: {'name': 'John', 'role': 'Sheriff', 'cards': {'Bang!': 2, 'Missed!': 1}, 'health': 5, 'distance': 1}, 2: {'name': 'Jane', 'role': 'Outlaw', 'cards': {'Panic!': 1, 'Beer': 1}, 'health': 4, 'distance': 1}, 3: {'name': 'Bill', 'role': 'Deputy', 'cards': {'Bang!': 1, 'Duel': 1}, 'health': 4, 'distance': 1}, 4: {'name': 'Sue', 'role': 'Renegade', 'cards': {'Cat Balou': 1, 'Missed!': 2}, 'health': 4, 'distance': 1}}}}, 'phases': {0: {'name': 'Game Introduction', 'description': 'Introduce the Wild West shootout card game rules, roles, and objectives to all players.', 'actions': [{'description': 'Display game rules, objectives, and basic setup to all players.', 'tools': ['display_game_intro']}, {'description': 'Show player list and role possibilities.', 'tools': ['display_player_setup']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Game introduction has been displayed to all players.'}, 'next_phase': {'id': 1, 'name': 'Role Assignment'}}, 1: {'name': 'Role Assignment', 'description': 'Randomly assign hidden roles to players according to game configuration, revealing the Sheriff.', 'actions': [{'description': 'Randomly assign roles to players; reveal the Sheriff to all.', 'tools': ['assign_roles_randomly', 'reveal_sheriff']}, {'description': 'Notify players privately of their assigned hidden roles.', 'tools': ['notify_player_roles']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Roles have been assigned and the Sheriff has been revealed.'}, 'next_phase': {'id': 2, 'name': 'First Round Start'}}, 2: {'name': 'First Round Start', 'description': 'Begin the first round of the game, allowing the Sheriff to take the first action.', 'actions': [{'description': 'Start the game with the Sheriff taking the first turn.', 'tools': ['start_with_sheriff']}, {'description': 'Deal initial cards to all players.', 'tools': ['deal_initial_cards']}], 'completion_criteria': {'type': 'player_action', 'description': 'Sheriff has taken their first action, and relevant player state (player_states) has been updated.', 'wait_for': 'single_player_choice', 'target_players': {'description': 'The player with the role of Sheriff', 'condition': "player.role == 'Sheriff'"}}, 'next_phase': {'id': 3, 'name': 'Next Player Turn'}}, 3: {'name': 'Next Player Turn', 'description': 'Continue the game with each player taking turns in sequence.', 'actions': [{'description': 'Prompt the current player to take their turn using available cards.', 'tools': ['player_turn_action']}, {'description': "Update game board and player states after the player's turn.", 'tools': ['update_game_state']}], 'completion_criteria': {'type': 'player_action', 'description': 'Current player has completed their action, and relevant player state (player_states) has been updated.', 'wait_for': 'single_player_choice', 'target_players': {'description': 'The next player in sequence', 'condition': 'player.seat_number == next_seat_number'}}, 'next_phase': {'If a win condition is met': {'id': 4, 'name': 'Game Over'}, "Otherwise, continue to next player's turn": {'id': 3, 'name': 'Next Player Turn'}}}, 4: {'name': 'Game Over', 'description': 'End the game, announce the winners, and display final results.', 'actions': [{'description': "Evaluate win conditions to determine the game's conclusion.", 'tools': ['evaluate_win_conditions']}, {'description': 'Display final results and recap the game outcomes.', 'tools': ['display_game_summary']}], 'completion_criteria': {'type': 'UI_displayed', 'description': 'Game over screen and results have been displayed to all players.'}, 'next_phase': {'id': None, 'name': 'End'}}}}, 'game_description': 'A Wild West shootout card game where players have hidden roles and use playing cards to attack, defend, and survive. The Sheriff (revealed) must eliminate Outlaws and the Renegade. Deputies protect the Sheriff. Outlaws try to kill the Sheriff. The Renegade wants to be the last one standing. Players sit in a circle with distance determining who can be targeted by various cards.\\n\\nGame Flow Navigation: game_setup → role_assignment → character_assignment → initial_setup → turn_start → draw_phase → play_phase → (reaction windows for cards like Bang!/Missed!) → damage_resolution → discard_phase → elimination_check → (check win conditions) → turn_start OR game_over. Each turn consists of drawing 2 cards and playing cards from hand.\\n\\nRole Victory Conditions: Sheriff wins if all Outlaws and Renegade eliminated. Outlaws win if Sheriff eliminated (even if they\'re dead). Deputies win if Sheriff wins. Renegade wins if they\'re the last player alive. Sheriff is always revealed, other roles stay hidden until eliminated.\\n\\nDistance and Range: Players sit in a circle. Distance = shortest path between players (clockwise or counter-clockwise). Base range for Bang! is 1 (adjacent players only). Weapons increase Bang! range. Some cards (Panic!, Cat Balou) have fixed range 1. Distance affects strategic positioning and alliances.\\n\\nCard Types: Playing cards include Bang! (attack), Missed! (defense), Beer (heal), Panic!/Cat Balou (steal/discard), Duel (force showdown), Indians!/Gatling (area attacks), Weapons (increase range), and other equipment. Each character has unique abilities that modify rules (e.g., Rose Doolan sees everyone at distance -1).\\n\\nReaction System: When attacked with Bang!, target can play Missed! to avoid damage. Indians! requires all players to discard Bang! or take damage. Duel creates Bang! exchanges until someone can\'t respond. Real-time reaction windows use collectInputs with timeouts."'}
2025-10-13 20:14:35,651 [INFO] DSLAgent: Reading from file path: /home/lee/canvas-with-langgraph-python/games/bang!.yaml
2025-10-13 20:14:35,651 [INFO] DSLAgent: File exists: True
2025-10-13 20:14:35,652 [INFO] DSLAgent: File content before validation (length: 5497):
2025-10-13 20:14:35,652 [INFO] DSLAgent: File content preview: declaration:
  description: A Wild West shootout card game where players have hidden roles and
    use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws
    and the Rene...
2025-10-13 20:14:59,221 [INFO] DSLAgent: Model response YAML length: 5488
2025-10-13 20:14:59,226 [INFO] DSLAgent: Validated YAML keys: ['declaration', 'phases']
2025-10-13 20:14:59,228 [INFO] DSLAgent: Final validated YAML to write (length: 5471):
2025-10-13 20:14:59,229 [INFO] DSLAgent: Final YAML preview: declaration:
  description: A Wild West shootout card game where players have hidden roles and
    use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws
    and the Rene...
2025-10-13 20:14:59,229 [INFO] DSLAgent: Final verification - file content (length: 5471):
2025-10-13 20:14:59,229 [INFO] DSLAgent: Final content preview: declaration:
  description: A Wild West shootout card game where players have hidden roles and
    use playing cards to attack, defend, and survive. The Sheriff must eliminate Outlaws
    and the Rene...
2025-10-13 20:14:59,229 [INFO] DSLAgent: === VALIDATION NODE END ===
